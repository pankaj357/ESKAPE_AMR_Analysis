a <-(c(1, 2, 3, 4))
data <- read.csv("/Users/admin/Desktop/ESKAPE_Project/amr_matrix.csv", row.names=1)
pheatmap(data, cluster_rows=TRUE, cluster_cols=TRUE,
display_numbers=TRUE, number_format="%d",
filename="amr_heatmap.pdf")
install.packages("pheatmap")
# R code snippet for visualization
library(pheatmap)
data <- read.csv("/Users/admin/Desktop/ESKAPE_Project/amr_matrix.csv", row.names=1)
pheatmap(data, cluster_rows=TRUE, cluster_cols=TRUE,
display_numbers=TRUE, number_format="%d",
filename="amr_heatmap.pdf")
# R code snippet for visualization
library(pheatmap)
data <- read.csv("/Users/admin/Desktop/ESKAPE_Project/amr_matrix.csv", row.names=1)
pheatmap(data, cluster_rows=TRUE, cluster_cols=TRUE,
display_numbers=TRUE, number_format="%d",
filename="amr_heatmap.pdf")
# Enhanced AMR Heatmap Visualization
library(pheatmap)
library(RColorBrewer)
# 1. Load and prepare data
amr_data <- read.csv("/Users/admin/Desktop/ESKAPE_Project/amr_matrix.csv",
row.names = 1,
check.names = FALSE)  # Preserve special characters in headers
# 2. Create annotation colors (customize as needed)
strain_colors <- list(
Strain = colorRampPalette(brewer.pal(8, "Set2"))(ncol(amr_data))
)
names(strain_colors$Strain) <- colnames(amr_data)
# 3. Generate enhanced heatmap
heatmap <- pheatmap(
amr_data,
color = c("white", "firebrick"),  # 0=white, 1=red
cluster_rows = TRUE,
cluster_cols = TRUE,
clustering_distance_rows = "binary",
clustering_distance_cols = "binary",
display_numbers = TRUE,
number_format = "%d",
number_color = "black",
fontsize_row = 8,
fontsize_col = 10,
annotation_colors = strain_colors,
cellwidth = 20,
cellheight = 12,
filename = "/Users/admin/Desktop/ESKAPE_Project/amr_heatmap.pdf",
width = 10,
height = 14
)
# 4. Save cluster information
write.csv(heatmap$tree_row$order, "gene_clusters.csv")
write.csv(heatmap$tree_col$order, "strain_clusters.csv")
# Enhanced AMR Heatmap Visualization
library(pheatmap)
library(RColorBrewer)
# 1. Load and prepare data
amr_data <- read.csv("/Users/admin/Desktop/ESKAPE_Project/amr_matrix.csv",
row.names = 1,
check.names = FALSE)  # Preserve special characters in headers
# 2. Create annotation colors (customize as needed)
strain_colors <- list(
Strain = colorRampPalette(brewer.pal(8, "Set2"))(ncol(amr_data))
)
names(strain_colors$Strain) <- colnames(amr_data)
# 3. Generate enhanced heatmap
heatmap <- pheatmap(
amr_data,
color = c("white", "firebrick"),  # 0=white, 1=red
cluster_rows = TRUE,
cluster_cols = TRUE,
clustering_distance_rows = "binary",
clustering_distance_cols = "binary",
display_numbers = TRUE,
number_format = "%d",
number_color = "black",
fontsize_row = 8,
fontsize_col = 10,
annotation_colors = strain_colors,
cellwidth = 20,
cellheight = 12,
filename = "/Users/admin/Desktop/ESKAPE_Project/amr_heatmap.pdf",
width = 10,
height = 14
)
# 4. Save cluster information
write.csv(heatmap$tree_row$order, "gene_clusters.csv")
write.csv(heatmap$tree_col$order, "strain_clusters.csv")
library(ggplot2)
library(dplyr)
install.packages("dplyr")
library(ggplot2)
library(dplyr)
# 1. Load your AMR matrix
amr_data <- read.csv("/Users/admin/Desktop/ESKAPE_Project/amr_matrix.csv",
row.names = 1,
check.names = FALSE)
# 2. Calculate gene counts per strain
gene_counts <- data.frame(
Strain = colnames(amr_data),
Count = colSums(amr_data)
)
# 3. Create the bar chart
ggplot(gene_counts, aes(x = reorder(Strain, -Count), y = Count, fill = Strain)) +
geom_bar(stat = "identity") +
geom_text(aes(label = Count), vjust = -0.5, color = "black") + # Add count labels
labs(title = "AMR Gene Counts by Strain",
x = "Strain",
y = "Number of AMR Genes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1),
legend.position = "none") + # Remove legend
scale_fill_brewer(palette = "Set3") # Color palette
# 4. Save the plot
ggsave("/Users/admin/Desktop/ESKAPE_Project/amr_gene_counts.png",
width = 10, height = 6, dpi = 300)
library(ggVennDiagram)
install.packages("ggVennDiagram")
library(ggVennDiagram)
library(ggplot2)
# Load your AMR matrix
amr_matrix <- read.csv("amr_matrix.csv", row.names = 1)
library(ggVennDiagram)
library(ggplot2)
# Load your AMR matrix
amr_matrix <- read.csv("/Users/admin/Desktop/ESKAPE_Project/amr_matrix.csv", row.names = 1)
# Define gene sets for each strain (convert 1/0 to logical)
gene_sets <- lapply(colnames(amr_matrix), function(strain) {
rownames(amr_matrix)[amr_matrix[,strain] == 1]
})
names(gene_sets) <- colnames(amr_matrix)
# A. Core vs variable genes (all strains)
core_genes <- rownames(amr_matrix)[rowSums(amr_matrix) == ncol(amr_matrix)]
variable_genes <- rownames(amr_matrix)[rowSums(amr_matrix) < ncol(amr_matrix)]
cat("Core genes (all strains):", length(core_genes), "\n")
cat("Variable genes:", length(variable_genes), "\n")
# B. Venn diagram for top 4 strains (adjust as needed)
selected_strains <- names(sort(colSums(amr_matrix), decreasing = TRUE)[1:4]
ggVennDiagram(gene_sets[selected_strains],
library(ggVennDiagram)
library(ggplot2)
# Load your AMR matrix
amr_matrix <- read.csv("/Users/admin/Desktop/ESKAPE_Project/amr_matrix.csv", row.names = 1)
# Define gene sets for each strain (convert 1/0 to logical)
gene_sets <- lapply(colnames(amr_matrix), function(strain) {
rownames(amr_matrix)[amr_matrix[,strain] == 1]
})
names(gene_sets) <- colnames(amr_matrix)
# A. Core vs variable genes (all strains)
core_genes <- rownames(amr_matrix)[rowSums(amr_matrix) == ncol(amr_matrix)]
variable_genes <- rownames(amr_matrix)[rowSums(amr_matrix) < ncol(amr_matrix)]
cat("Core genes (all strains):", length(core_genes), "\n")
cat("Variable genes:", length(variable_genes), "\n")
# B. Venn diagram for top 4 strains (adjust as needed)
selected_strains <- names(sort(colSums(amr_matrix), decreasing = TRUE)[1:4]
ggVennDiagram(gene_sets[selected_strains],
library(ggVennDiagram)
library(ggplot2)
# Load your AMR matrix
amr_matrix <- read.csv("/Users/admin/Desktop/ESKAPE_Project/amr_matrix.csv", row.names = 1)
# Define gene sets for each strain (convert 1/0 to logical)
gene_sets <- lapply(colnames(amr_matrix), function(strain) {
rownames(amr_matrix)[amr_matrix[,strain] == 1]
})
names(gene_sets) <- colnames(amr_matrix)
# A. Core vs variable genes (all strains)
core_genes <- rownames(amr_matrix)[rowSums(amr_matrix) == ncol(amr_matrix)]
variable_genes <- rownames(amr_matrix)[rowSums(amr_matrix) < ncol(amr_matrix)]
cat("Core genes (all strains):", length(core_genes), "\n")
cat("Variable genes:", length(variable_genes), "\n")
# B. Venn diagram for top 4 strains (adjust as needed)
selected_strains <- names(sort(colSums(amr_matrix), decreasing = TRUE)[1:4]
ggVennDiagram(gene_sets[selected_strains],
library(ggVennDiagram)
library(ggplot2)
# Load your AMR matrix
amr_matrix <- read.csv("amr_matrix.csv", row.names = 1)
library(ggVennDiagram)
library(ggplot2)
# Load your AMR matrix
amr_matrix <- read.csv("/Users/admin/Desktop/ESKAPE_Project/amr_matrix.csv", row.names = 1)
# Define gene sets for each strain (convert 1/0 to logical)
gene_sets <- lapply(colnames(amr_matrix), function(strain) {
rownames(amr_matrix)[amr_matrix[,strain] == 1]
})
names(gene_sets) <- colnames(amr_matrix)
# A. Core vs variable genes (all strains)
core_genes <- rownames(amr_matrix)[rowSums(amr_matrix) == ncol(amr_matrix)]
variable_genes <- rownames(amr_matrix)[rowSums(amr_matrix) < ncol(amr_matrix)]
cat("Core genes (all strains):", length(core_genes), "\n")
cat("Variable genes:", length(variable_genes), "\n")
# B. Venn diagram for top 4 strains (adjust as needed)
selected_strains <- names(sort(colSums(amr_matrix), decreasing = TRUE)[1:4]
ggVennDiagram(gene_sets[selected_strains],
library(ggVennDiagram)
library(ggplot2)
# Load your AMR matrix
amr_matrix <- read.csv("/Users/admin/Desktop/ESKAPE_Project/amr_matrix.csv", row.names = 1)
# Define gene sets for each strain (convert 1/0 to logical)
gene_sets <- lapply(colnames(amr_matrix), function(strain) {
rownames(amr_matrix)[amr_matrix[,strain] == 1]
})
names(gene_sets) <- colnames(amr_matrix)
# A. Core vs variable genes (all strains)
core_genes <- rownames(amr_matrix)[rowSums(amr_matrix) == ncol(amr_matrix)]
variable_genes <- rownames(amr_matrix)[rowSums(amr_matrix) < ncol(amr_matrix)]
cat("Core genes (all strains):", length(core_genes), "\n")
cat("Variable genes:", length(variable_genes), "\n")
# B. Venn diagram for top 4 strains (adjust as needed)
selected_strains <- names(sort(colSums(amr_matrix), decreasing = TRUE)[1:4])
# Create and save Venn diagram
venn_plot <- ggVennDiagram(gene_sets[selected_strains],
label_alpha = 0,
category.names = selected_strains) +
scale_fill_gradient(low = "blue", high = "red") +
labs(title = "AMR Gene Sharing Between Top Strains")
ggsave("venn_diagram_top_strains.png", venn_plot, width = 8, height = 6)
# C. Presence-absence categories
presence_counts <- data.frame(
Genes = rownames(amr_matrix),
Present_In = rowSums(amr_matrix)
)
# Create and save presence-absence plot
presence_plot <- ggplot(presence_counts, aes(x = Present_In)) +
geom_bar(fill = "steelblue") +
labs(x = "Number of Strains Containing Gene",
y = "Number of Genes",
title = "Gene Distribution Across Strains") +
geom_vline(xintercept = ncol(amr_matrix),
linetype = "dashed", color = "red") +
annotate("text", x = ncol(amr_matrix) + 1,
y = max(table(presence_counts$Present_In)),
label = "Core Genes", color = "red")
ggsave("gene_presence_distribution.png", presence_plot)
getwd()
system("open /Users/admin/")
# =============================================
# AMR Gene Analysis: Core vs. Accessory Genes
# =============================================
# Load required libraries
library(dplyr)
library(tidyr)
library(ggplot2)
# ----------------------------
# 1. Load and Prepare Data
# ----------------------------
# Set working directory (adjust path)
setwd("/Users/admin/Desktop/ESKAPE_Project/")
# Load AMR matrix (rows=genes, columns=strains)
amr_matrix <- read.csv("amr_matrix.csv", row.names = 1)
# Convert to binary matrix if not already
amr_matrix[amr_matrix > 0] <- 1
# ----------------------------
# 2. Classify Genes
# ----------------------------
# Create results directory if needed
if (!dir.exists("AMR_Results")) dir.create("AMR_Results")
# Calculate gene presence statistics
gene_stats <- data.frame(
Gene = rownames(amr_matrix),
Present_In = rowSums(amr_matrix),
Total_Strains = ncol(amr_matrix),
Category = case_when(
rowSums(amr_matrix) == ncol(amr_matrix) ~ "Core",
rowSums(amr_matrix) == 1 ~ "Strain-specific",
TRUE ~ "Species-specific"
)
) %>%
arrange(desc(Present_In))
# ----------------------------
# 3. Strain-Specific Analysis
# ----------------------------
# Get core genes (for filtering)
core_genes <- gene_stats %>% filter(Category == "Core") %>% pull(Gene)
# List of unique genes per strain
strain_genes <- lapply(colnames(amr_matrix), function(strain) {
genes <- rownames(amr_matrix)[amr_matrix[, strain] == 1]
data.frame(
Strain = strain,
Gene = genes,
Is_Core = genes %in% core_genes
)
}) %>% bind_rows()
# ----------------------------
# 4. Save All Results
# ----------------------------
# Main gene classification
write.csv(gene_stats, "AMR_Results/core_accessory_genes.csv", row.names = FALSE)
# Strain-specific gene list
strain_genes %>%
filter(!Is_Core) %>%
select(-Is_Core) %>%
write.csv("AMR_Results/strain_specific_genes.csv", row.names = FALSE)
# Core gene list
write.csv(data.frame(Core_Genes = core_genes),
"AMR_Results/core_genes.csv", row.names = FALSE)
# ----------------------------
# 5. Visualizations
# ----------------------------
# Plot 1: Gene category distribution
p1 <- ggplot(gene_stats, aes(x = Category, fill = Category)) +
geom_bar() +
geom_text(stat = 'count', aes(label = ..count..), vjust = -0.5) +
scale_fill_brewer(palette = "Set2") +
labs(title = "AMR Gene Distribution",
subtitle = paste("Total strains:", ncol(amr_matrix)),
x = "Category", y = "Number of Genes") +
theme_minimal()
# Plot 2: Presence frequency histogram
p2 <- ggplot(gene_stats, aes(x = Present_In)) +
geom_histogram(binwidth = 1, fill = "steelblue", color = "white") +
geom_vline(xintercept = ncol(amr_matrix), linetype = "dashed", color = "red") +
annotate("text", x = ncol(amr_matrix) + 1,
y = max(ggplot_build(p2)$data[[1]]$count),
label = "Core Genes", color = "red", hjust = 0) +
labs(title = "Gene Presence Frequency",
x = "Number of Strains Containing Gene", y = "Count") +
theme_minimal()
# =============================================
# AMR Gene Analysis: Core vs. Accessory Genes
# =============================================
# Load required libraries
library(dplyr)
library(tidyr)
library(ggplot2)
# ----------------------------
# 1. Load and Prepare Data
# ----------------------------
# Set working directory (adjust path)
setwd("/Users/admin/Desktop/ESKAPE_Project/")
# Load AMR matrix (rows=genes, columns=strains)
amr_matrix <- read.csv("amr_matrix.csv", row.names = 1)
# Convert to binary matrix if not already
amr_matrix[amr_matrix > 0] <- 1
# ----------------------------
# 2. Classify Genes
# ----------------------------
# Create results directory if needed
if (!dir.exists("AMR_Results")) dir.create("AMR_Results")
# Calculate gene presence statistics
gene_stats <- data.frame(
Gene = rownames(amr_matrix),
Present_In = rowSums(amr_matrix),
Total_Strains = ncol(amr_matrix),
Category = case_when(
rowSums(amr_matrix) == ncol(amr_matrix) ~ "Core",
rowSums(amr_matrix) == 1 ~ "Strain-specific",
TRUE ~ "Species-specific"
)
) %>%
arrange(desc(Present_In))
# ----------------------------
# 3. Strain-Specific Analysis
# ----------------------------
# Get core genes (for filtering)
core_genes <- gene_stats %>% filter(Category == "Core") %>% pull(Gene)
# List of unique genes per strain
strain_genes <- lapply(colnames(amr_matrix), function(strain) {
genes <- rownames(amr_matrix)[amr_matrix[, strain] == 1]
data.frame(
Strain = strain,
Gene = genes,
Is_Core = genes %in% core_genes
)
}) %>% bind_rows()
# ----------------------------
# 4. Save All Results
# ----------------------------
# Main gene classification
write.csv(gene_stats, "AMR_Results/core_accessory_genes.csv", row.names = FALSE)
# Strain-specific gene list
strain_genes %>%
filter(!Is_Core) %>%
select(-Is_Core) %>%
write.csv("AMR_Results/strain_specific_genes.csv", row.names = FALSE)
# Core gene list
write.csv(data.frame(Core_Genes = core_genes),
"AMR_Results/core_genes.csv", row.names = FALSE)
# ----------------------------
# 5. Visualizations
# ----------------------------
# Plot 1: Gene category distribution
p1 <- ggplot(gene_stats, aes(x = Category, fill = Category)) +
geom_bar() +
geom_text(stat = 'count', aes(label = ..count..), vjust = -0.5) +
scale_fill_brewer(palette = "Set2") +
labs(title = "AMR Gene Distribution",
subtitle = paste("Total strains:", ncol(amr_matrix)),
x = "Category", y = "Number of Genes") +
theme_minimal()
# Plot 2: Presence frequency histogram
p2 <- ggplot(gene_stats, aes(x = Present_In)) +
geom_histogram(binwidth = 1, fill = "steelblue", color = "white") +
geom_vline(xintercept = ncol(amr_matrix), linetype = "dashed", color = "red") +
annotate("text", x = ncol(amr_matrix) + 1,
y = max(ggplot_build(p2)$data[[1]]$count),
label = "Core Genes", color = "red", hjust = 0) +
labs(title = "Gene Presence Frequency",
x = "Number of Strains Containing Gene", y = "Count") +
theme_minimal()
# =============================================
# AMR Gene Analysis: Core vs. Accessory Genes
# =============================================
# Load required libraries
library(dplyr)
library(tidyr)
library(ggplot2)
# ----------------------------
# 1. Load and Prepare Data
# ----------------------------
# Set working directory (adjust path)
setwd("/Users/admin/Desktop/ESKAPE_Project/")
# Load AMR matrix (rows=genes, columns=strains)
amr_matrix <- read.csv("amr_matrix.csv", row.names = 1)
# Convert to binary matrix if not already
amr_matrix[amr_matrix > 0] <- 1
# ----------------------------
# 2. Classify Genes
# ----------------------------
# Create results directory if needed
if (!dir.exists("AMR_Results")) dir.create("AMR_Results")
# Calculate gene presence statistics
gene_stats <- data.frame(
Gene = rownames(amr_matrix),
Present_In = rowSums(amr_matrix),
Total_Strains = ncol(amr_matrix),
Category = case_when(
rowSums(amr_matrix) == ncol(amr_matrix) ~ "Core",
rowSums(amr_matrix) == 1 ~ "Strain-specific",
TRUE ~ "Species-specific"
)
) %>%
arrange(desc(Present_In))
# ----------------------------
# 3. Strain-Specific Analysis
# ----------------------------
# Get core genes (for filtering)
core_genes <- gene_stats %>% filter(Category == "Core") %>% pull(Gene)
# List of unique genes per strain
strain_genes <- lapply(colnames(amr_matrix), function(strain) {
genes <- rownames(amr_matrix)[amr_matrix[, strain] == 1]
data.frame(
Strain = strain,
Gene = genes,
Is_Core = genes %in% core_genes
)
}) %>% bind_rows()
# ----------------------------
# 4. Save All Results
# ----------------------------
# Main gene classification
write.csv(gene_stats, "AMR_Results/core_accessory_genes.csv", row.names = FALSE)
# Strain-specific gene list
strain_genes %>%
filter(!Is_Core) %>%
select(-Is_Core) %>%
write.csv("AMR_Results/strain_specific_genes.csv", row.names = FALSE)
# Core gene list
write.csv(data.frame(Core_Genes = core_genes),
"AMR_Results/core_genes.csv", row.names = FALSE)
# ----------------------------
# 5. Visualizations
# ----------------------------
# Plot 1: Gene category distribution
p1 <- ggplot(gene_stats, aes(x = Category, fill = Category)) +
geom_bar() +
geom_text(stat = 'count', aes(label = ..count..), vjust = -0.5) +
scale_fill_brewer(palette = "Set2") +
labs(title = "AMR Gene Distribution",
subtitle = paste("Total strains:", ncol(amr_matrix)),
x = "Category", y = "Number of Genes") +
theme_minimal()
# Save Plot 1 immediately
ggsave("AMR_Results/gene_category_distribution.png", p1, width = 8, height = 6)
# Plot 2: Presence frequency histogram
p2 <- ggplot(gene_stats, aes(x = Present_In)) +
geom_histogram(binwidth = 1, fill = "steelblue", color = "white") +
geom_vline(xintercept = ncol(amr_matrix), linetype = "dashed", color = "red") +
annotate("text", x = ncol(amr_matrix) + 1,
y = max(hist(gene_stats$Present_In, plot = FALSE)$counts),
label = "Core Genes", color = "red", hjust = 0) +
labs(title = "Gene Presence Frequency",
x = "Number of Strains Containing Gene", y = "Count") +
theme_minimal()
# Save Plot 2 immediately
ggsave("AMR_Results/gene_presence_histogram.png", p2, width = 8, height = 6)
# ----------------------------
# 6. Summary Report
# ----------------------------
sink("AMR_Results/analysis_summary.txt")
cat("=== AMR Gene Analysis Report ===\n\n")
cat("Date:", format(Sys.Date(), "%Y-%m-%d"), "\n")
cat("Total genes analyzed:", nrow(amr_matrix), "\n")
cat("Total strains analyzed:", ncol(amr_matrix), "\n\n")
cat("Core genes (present in ALL strains):",
sum(gene_stats$Category == "Core"), "\n")
cat("Species-specific genes (present in >1 but not all strains):",
sum(gene_stats$Category == "Species-specific"), "\n")
cat("Strain-specific genes (unique to single strains):",
sum(gene_stats$Category == "Strain-specific"), "\n\n")
cat("Top 5 most widespread non-core genes:\n")
print(
gene_stats %>%
filter(Category != "Core") %>%
slice_max(Present_In, n = 5)
)
cat("\nStrain with most unique genes:",
names(sort(colSums(amr_matrix[gene_stats$Gene[gene_stats$Category == "Strain-specific"], ]),
decreasing = TRUE))[1], "\n")
sink()
# Open results directory
system("open AMR_Results/")
